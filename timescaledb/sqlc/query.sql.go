// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package timescaledb

import (
	"context"
)

const getMetricsByDevice = `-- name: GetMetricsByDevice :many
SELECT timestamp, serial_number, metrics
FROM ecoflow_metrics
WHERE serial_number = $1
ORDER BY timestamp DESC
`

func (q *Queries) GetMetricsByDevice(ctx context.Context, serialNumber string) ([]EcoflowMetric, error) {
	rows, err := q.db.Query(ctx, getMetricsByDevice, serialNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EcoflowMetric{}
	for rows.Next() {
		var i EcoflowMetric
		if err := rows.Scan(&i.Timestamp, &i.SerialNumber, &i.Metrics); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMetric = `-- name: InsertMetric :one
INSERT INTO ecoflow_metrics (serial_number, metrics)
VALUES ($1, $2)
RETURNING timestamp, serial_number, metrics
`

type InsertMetricParams struct {
	SerialNumber string `json:"serial_number"`
	Metrics      []byte `json:"metrics"`
}

func (q *Queries) InsertMetric(ctx context.Context, arg InsertMetricParams) (EcoflowMetric, error) {
	row := q.db.QueryRow(ctx, insertMetric, arg.SerialNumber, arg.Metrics)
	var i EcoflowMetric
	err := row.Scan(&i.Timestamp, &i.SerialNumber, &i.Metrics)
	return i, err
}
